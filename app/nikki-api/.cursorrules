# Nikki Project - AI開発ガイド

このドキュメントは、AI（Claude/Cursor）がNikkiプロジェクトの開発を支援する際の基盤となる情報を提供します。

---

## 1. プロジェクト概要

### 1.1 プロジェクト名
**Nikki** - 日記管理システム

### 1.2 目的
（今後追記予定）

### 1.3 主要機能
（今後追記予定）

---

## 2. 技術スタック

### 2.1 バックエンド
- **言語**: F# (関数型プログラミング)
- **フレームワーク**: ASP.NET Core
- **ランタイム**: .NET 8.0
- **プロジェクト構成**:
  - `NikkiApi`: メインAPIプロジェクト
  - `NikkiApi.Test`: テストプロジェクト

### 2.2 フロントエンド
（今後追記予定）

### 2.3 インフラ
（今後追記予定）

---

## 3. 開発規約

### 3.1 コーディングスタイル

#### F#
- 関数型プログラミングのパラダイムを優先する
- イミュータブルなデータ構造を使用する
- パイプライン演算子 (`|>`) を積極的に活用する
- パターンマッチングを適切に使用する
- `let` バインディングは適切にインデントする（通常4スペース）

#### 命名規則
- **関数**: キャメルケース (`getUserById`)
- **型**: パスカルケース (`UserProfile`)
- **モジュール**: パスカルケース (`UserService`)

### 3.2 ファイル構成
- 1ファイル = 1つの主要な責務
- プロジェクトファイル（`.fsproj`）でコンパイル順序を明示的に管理

### 3.3 エラーハンドリング
（今後追記予定）

---

## 4. アーキテクチャ

### 4.1 全体構成
```
app/
  nikki-api/          # バックエンドAPI
    NikkiApi/         # メインプロジェクト
    NikkiApi.Test/    # テストプロジェクト
```

### 4.2 レイヤー構造
（今後追記予定）

### 4.3 データフロー
（今後追記予定）

---

## 5. API設計

### 5.1 エンドポイント規約
（今後追記予定）

### 5.2 レスポンス形式
（今後追記予定）

### 5.3 認証・認可
（今後追記予定）

---

## 6. データベース

### 6.1 スキーマ設計
（今後追記予定）

### 6.2 マイグレーション
（今後追記予定）

---

## 7. テスト戦略

### 7.1 テストフレームワーク
- xUnit（既存のテストプロジェクトで使用）

### 7.2 テスト方針
（今後追記予定）

### 7.3 カバレッジ目標
（今後追記予定）

---

## 8. デプロイメント

### 8.1 環境
（今後追記予定）

### 8.2 CI/CD
（今後追記予定）

---

## 9. セキュリティ

### 9.1 認証方式
（今後追記予定）

### 9.2 データ保護
（今後追記予定）

---

## 10. パフォーマンス

### 10.1 最適化方針
（今後追記予定）

### 10.2 監視・ログ
（今後追記予定）

---

## 11. 開発ワークフロー

### 11.1 ブランチ戦略
（今後追記予定）

### 11.2 コミット規約
（今後追記予定）

### 11.3 レビュープロセス
（今後追記予定）

---

## 12. 依存関係管理

### 12.1 パッケージ管理
- NuGet (.NET パッケージ)

### 12.2 バージョンポリシー
（今後追記予定）

---

## 13. ドキュメント

### 13.1 APIドキュメント
（今後追記予定）

### 13.2 開発者向けドキュメント
（今後追記予定）

---

## 14. その他の観点

### 14.1 （観点名）
（今後追記予定）

### 14.2 （観点名）
（今後追記予定）

---

## メタ情報

- **作成日**: 2025-10-22
- **最終更新**: 2025-10-22
- **ドキュメント管理**: 新しい観点を追加する際は、適切なセクション番号を付与し、目次を更新してください

---

## Cursor/Claude向けの指示

### コード生成時の原則
1. **F#の関数型アプローチを優先**: 副作用を最小限に抑え、純粋関数を中心に設計する
2. **型安全性**: 可能な限り型システムを活用し、実行時エラーを防ぐ
3. **明示的 > 暗黙的**: コードの意図を明確にする
4. **小さく保つ**: 関数は単一責任の原則に従い、小さく保つ
5. **テスタビリティ**: テストしやすい構造を維持する

### 変更を加える際の確認事項
- [ ] 既存のコーディング規約に従っているか
- [ ] テストは追加/更新されているか
- [ ] エラーハンドリングは適切か
- [ ] パフォーマンスへの影響は考慮されているか
- [ ] セキュリティリスクはないか

